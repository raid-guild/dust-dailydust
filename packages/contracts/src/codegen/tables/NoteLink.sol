// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct NoteLinkData {
  uint8 linkType;
  int32 coordX;
  int32 coordY;
  int32 coordZ;
}

library NoteLink {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "rg_dd_ab564f", name: "NoteLink", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746272675f64645f61623536346600004e6f74654c696e6b0000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x000d040001040404000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, bytes32)
  Schema constant _keySchema = Schema.wrap(0x004002005f5f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, int32, int32, int32)
  Schema constant _valueSchema = Schema.wrap(0x000d040000232323000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "noteId";
    keyNames[1] = "entityId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "linkType";
    fieldNames[1] = "coordX";
    fieldNames[2] = "coordY";
    fieldNames[3] = "coordZ";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get linkType.
   */
  function getLinkType(bytes32 noteId, bytes32 entityId) internal view returns (uint8 linkType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get linkType.
   */
  function _getLinkType(bytes32 noteId, bytes32 entityId) internal view returns (uint8 linkType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set linkType.
   */
  function setLinkType(bytes32 noteId, bytes32 entityId, uint8 linkType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((linkType)), _fieldLayout);
  }

  /**
   * @notice Set linkType.
   */
  function _setLinkType(bytes32 noteId, bytes32 entityId, uint8 linkType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((linkType)), _fieldLayout);
  }

  /**
   * @notice Get coordX.
   */
  function getCoordX(bytes32 noteId, bytes32 entityId) internal view returns (int32 coordX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get coordX.
   */
  function _getCoordX(bytes32 noteId, bytes32 entityId) internal view returns (int32 coordX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set coordX.
   */
  function setCoordX(bytes32 noteId, bytes32 entityId, int32 coordX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((coordX)), _fieldLayout);
  }

  /**
   * @notice Set coordX.
   */
  function _setCoordX(bytes32 noteId, bytes32 entityId, int32 coordX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((coordX)), _fieldLayout);
  }

  /**
   * @notice Get coordY.
   */
  function getCoordY(bytes32 noteId, bytes32 entityId) internal view returns (int32 coordY) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get coordY.
   */
  function _getCoordY(bytes32 noteId, bytes32 entityId) internal view returns (int32 coordY) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set coordY.
   */
  function setCoordY(bytes32 noteId, bytes32 entityId, int32 coordY) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((coordY)), _fieldLayout);
  }

  /**
   * @notice Set coordY.
   */
  function _setCoordY(bytes32 noteId, bytes32 entityId, int32 coordY) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((coordY)), _fieldLayout);
  }

  /**
   * @notice Get coordZ.
   */
  function getCoordZ(bytes32 noteId, bytes32 entityId) internal view returns (int32 coordZ) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get coordZ.
   */
  function _getCoordZ(bytes32 noteId, bytes32 entityId) internal view returns (int32 coordZ) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set coordZ.
   */
  function setCoordZ(bytes32 noteId, bytes32 entityId, int32 coordZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((coordZ)), _fieldLayout);
  }

  /**
   * @notice Set coordZ.
   */
  function _setCoordZ(bytes32 noteId, bytes32 entityId, int32 coordZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((coordZ)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 noteId, bytes32 entityId) internal view returns (NoteLinkData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 noteId, bytes32 entityId) internal view returns (NoteLinkData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 noteId, bytes32 entityId, uint8 linkType, int32 coordX, int32 coordY, int32 coordZ) internal {
    bytes memory _staticData = encodeStatic(linkType, coordX, coordY, coordZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(bytes32 noteId, bytes32 entityId, uint8 linkType, int32 coordX, int32 coordY, int32 coordZ) internal {
    bytes memory _staticData = encodeStatic(linkType, coordX, coordY, coordZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 noteId, bytes32 entityId, NoteLinkData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.linkType, _table.coordX, _table.coordY, _table.coordZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 noteId, bytes32 entityId, NoteLinkData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.linkType, _table.coordX, _table.coordY, _table.coordZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint8 linkType, int32 coordX, int32 coordY, int32 coordZ) {
    linkType = (uint8(Bytes.getBytes1(_blob, 0)));

    coordX = (int32(uint32(Bytes.getBytes4(_blob, 1))));

    coordY = (int32(uint32(Bytes.getBytes4(_blob, 5))));

    coordZ = (int32(uint32(Bytes.getBytes4(_blob, 9))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (NoteLinkData memory _table) {
    (_table.linkType, _table.coordX, _table.coordY, _table.coordZ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 noteId, bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 noteId, bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(uint8 linkType, int32 coordX, int32 coordY, int32 coordZ) internal pure returns (bytes memory) {
    return abi.encodePacked(linkType, coordX, coordY, coordZ);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 linkType,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(linkType, coordX, coordY, coordZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 noteId, bytes32 entityId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = noteId;
    _keyTuple[1] = entityId;

    return _keyTuple;
  }
}
