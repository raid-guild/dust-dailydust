// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct CollectionData {
  address owner;
  uint64 createdAt;
  uint64 updatedAt;
  bool featured;
  string title;
  string description;
  string headerImageUrl;
  string extra;
}

library Collection {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "rg_dd_0001", name: "Collection", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746272675f64645f3030303100000000436f6c6c656374696f6e000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0025040414080801000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address, uint64, uint64, bool, string, string, string, string)
  Schema constant _valueSchema = Schema.wrap(0x0025040461070760c5c5c5c50000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "collectionId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "owner";
    fieldNames[1] = "createdAt";
    fieldNames[2] = "updatedAt";
    fieldNames[3] = "featured";
    fieldNames[4] = "title";
    fieldNames[5] = "description";
    fieldNames[6] = "headerImageUrl";
    fieldNames[7] = "extra";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get owner.
   */
  function getOwner(bytes32 collectionId) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get owner.
   */
  function _getOwner(bytes32 collectionId) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set owner.
   */
  function setOwner(bytes32 collectionId, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((owner)), _fieldLayout);
  }

  /**
   * @notice Set owner.
   */
  function _setOwner(bytes32 collectionId, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((owner)), _fieldLayout);
  }

  /**
   * @notice Get createdAt.
   */
  function getCreatedAt(bytes32 collectionId) internal view returns (uint64 createdAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get createdAt.
   */
  function _getCreatedAt(bytes32 collectionId) internal view returns (uint64 createdAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set createdAt.
   */
  function setCreatedAt(bytes32 collectionId, uint64 createdAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((createdAt)), _fieldLayout);
  }

  /**
   * @notice Set createdAt.
   */
  function _setCreatedAt(bytes32 collectionId, uint64 createdAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((createdAt)), _fieldLayout);
  }

  /**
   * @notice Get updatedAt.
   */
  function getUpdatedAt(bytes32 collectionId) internal view returns (uint64 updatedAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get updatedAt.
   */
  function _getUpdatedAt(bytes32 collectionId) internal view returns (uint64 updatedAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set updatedAt.
   */
  function setUpdatedAt(bytes32 collectionId, uint64 updatedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((updatedAt)), _fieldLayout);
  }

  /**
   * @notice Set updatedAt.
   */
  function _setUpdatedAt(bytes32 collectionId, uint64 updatedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((updatedAt)), _fieldLayout);
  }

  /**
   * @notice Get featured.
   */
  function getFeatured(bytes32 collectionId) internal view returns (bool featured) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get featured.
   */
  function _getFeatured(bytes32 collectionId) internal view returns (bool featured) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set featured.
   */
  function setFeatured(bytes32 collectionId, bool featured) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((featured)), _fieldLayout);
  }

  /**
   * @notice Set featured.
   */
  function _setFeatured(bytes32 collectionId, bool featured) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((featured)), _fieldLayout);
  }

  /**
   * @notice Get title.
   */
  function getTitle(bytes32 collectionId) internal view returns (string memory title) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get title.
   */
  function _getTitle(bytes32 collectionId) internal view returns (string memory title) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set title.
   */
  function setTitle(bytes32 collectionId, string memory title) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((title)));
  }

  /**
   * @notice Set title.
   */
  function _setTitle(bytes32 collectionId, string memory title) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((title)));
  }

  /**
   * @notice Get the length of title.
   */
  function lengthTitle(bytes32 collectionId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of title.
   */
  function _lengthTitle(bytes32 collectionId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of title.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemTitle(bytes32 collectionId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of title.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemTitle(bytes32 collectionId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to title.
   */
  function pushTitle(bytes32 collectionId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to title.
   */
  function _pushTitle(bytes32 collectionId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from title.
   */
  function popTitle(bytes32 collectionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from title.
   */
  function _popTitle(bytes32 collectionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of title at `_index`.
   */
  function updateTitle(bytes32 collectionId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of title at `_index`.
   */
  function _updateTitle(bytes32 collectionId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get description.
   */
  function getDescription(bytes32 collectionId) internal view returns (string memory description) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /**
   * @notice Get description.
   */
  function _getDescription(bytes32 collectionId) internal view returns (string memory description) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /**
   * @notice Set description.
   */
  function setDescription(bytes32 collectionId, string memory description) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, bytes((description)));
  }

  /**
   * @notice Set description.
   */
  function _setDescription(bytes32 collectionId, string memory description) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, bytes((description)));
  }

  /**
   * @notice Get the length of description.
   */
  function lengthDescription(bytes32 collectionId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of description.
   */
  function _lengthDescription(bytes32 collectionId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of description.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemDescription(bytes32 collectionId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of description.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemDescription(bytes32 collectionId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to description.
   */
  function pushDescription(bytes32 collectionId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Push a slice to description.
   */
  function _pushDescription(bytes32 collectionId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from description.
   */
  function popDescription(bytes32 collectionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Pop a slice from description.
   */
  function _popDescription(bytes32 collectionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Update a slice of description at `_index`.
   */
  function updateDescription(bytes32 collectionId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of description at `_index`.
   */
  function _updateDescription(bytes32 collectionId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get headerImageUrl.
   */
  function getHeaderImageUrl(bytes32 collectionId) internal view returns (string memory headerImageUrl) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /**
   * @notice Get headerImageUrl.
   */
  function _getHeaderImageUrl(bytes32 collectionId) internal view returns (string memory headerImageUrl) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /**
   * @notice Set headerImageUrl.
   */
  function setHeaderImageUrl(bytes32 collectionId, string memory headerImageUrl) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 2, bytes((headerImageUrl)));
  }

  /**
   * @notice Set headerImageUrl.
   */
  function _setHeaderImageUrl(bytes32 collectionId, string memory headerImageUrl) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 2, bytes((headerImageUrl)));
  }

  /**
   * @notice Get the length of headerImageUrl.
   */
  function lengthHeaderImageUrl(bytes32 collectionId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of headerImageUrl.
   */
  function _lengthHeaderImageUrl(bytes32 collectionId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of headerImageUrl.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemHeaderImageUrl(bytes32 collectionId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of headerImageUrl.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemHeaderImageUrl(bytes32 collectionId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to headerImageUrl.
   */
  function pushHeaderImageUrl(bytes32 collectionId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /**
   * @notice Push a slice to headerImageUrl.
   */
  function _pushHeaderImageUrl(bytes32 collectionId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from headerImageUrl.
   */
  function popHeaderImageUrl(bytes32 collectionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Pop a slice from headerImageUrl.
   */
  function _popHeaderImageUrl(bytes32 collectionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Update a slice of headerImageUrl at `_index`.
   */
  function updateHeaderImageUrl(bytes32 collectionId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of headerImageUrl at `_index`.
   */
  function _updateHeaderImageUrl(bytes32 collectionId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get extra.
   */
  function getExtra(bytes32 collectionId) internal view returns (string memory extra) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 3);
    return (string(_blob));
  }

  /**
   * @notice Get extra.
   */
  function _getExtra(bytes32 collectionId) internal view returns (string memory extra) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 3);
    return (string(_blob));
  }

  /**
   * @notice Set extra.
   */
  function setExtra(bytes32 collectionId, string memory extra) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 3, bytes((extra)));
  }

  /**
   * @notice Set extra.
   */
  function _setExtra(bytes32 collectionId, string memory extra) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 3, bytes((extra)));
  }

  /**
   * @notice Get the length of extra.
   */
  function lengthExtra(bytes32 collectionId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of extra.
   */
  function _lengthExtra(bytes32 collectionId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of extra.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemExtra(bytes32 collectionId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of extra.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemExtra(bytes32 collectionId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to extra.
   */
  function pushExtra(bytes32 collectionId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /**
   * @notice Push a slice to extra.
   */
  function _pushExtra(bytes32 collectionId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from extra.
   */
  function popExtra(bytes32 collectionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 3, 1);
  }

  /**
   * @notice Pop a slice from extra.
   */
  function _popExtra(bytes32 collectionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 3, 1);
  }

  /**
   * @notice Update a slice of extra at `_index`.
   */
  function updateExtra(bytes32 collectionId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of extra at `_index`.
   */
  function _updateExtra(bytes32 collectionId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 collectionId) internal view returns (CollectionData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 collectionId) internal view returns (CollectionData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 collectionId,
    address owner,
    uint64 createdAt,
    uint64 updatedAt,
    bool featured,
    string memory title,
    string memory description,
    string memory headerImageUrl,
    string memory extra
  ) internal {
    bytes memory _staticData = encodeStatic(owner, createdAt, updatedAt, featured);

    EncodedLengths _encodedLengths = encodeLengths(title, description, headerImageUrl, extra);
    bytes memory _dynamicData = encodeDynamic(title, description, headerImageUrl, extra);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 collectionId,
    address owner,
    uint64 createdAt,
    uint64 updatedAt,
    bool featured,
    string memory title,
    string memory description,
    string memory headerImageUrl,
    string memory extra
  ) internal {
    bytes memory _staticData = encodeStatic(owner, createdAt, updatedAt, featured);

    EncodedLengths _encodedLengths = encodeLengths(title, description, headerImageUrl, extra);
    bytes memory _dynamicData = encodeDynamic(title, description, headerImageUrl, extra);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 collectionId, CollectionData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.owner, _table.createdAt, _table.updatedAt, _table.featured);

    EncodedLengths _encodedLengths = encodeLengths(
      _table.title,
      _table.description,
      _table.headerImageUrl,
      _table.extra
    );
    bytes memory _dynamicData = encodeDynamic(_table.title, _table.description, _table.headerImageUrl, _table.extra);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 collectionId, CollectionData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.owner, _table.createdAt, _table.updatedAt, _table.featured);

    EncodedLengths _encodedLengths = encodeLengths(
      _table.title,
      _table.description,
      _table.headerImageUrl,
      _table.extra
    );
    bytes memory _dynamicData = encodeDynamic(_table.title, _table.description, _table.headerImageUrl, _table.extra);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (address owner, uint64 createdAt, uint64 updatedAt, bool featured) {
    owner = (address(Bytes.getBytes20(_blob, 0)));

    createdAt = (uint64(Bytes.getBytes8(_blob, 20)));

    updatedAt = (uint64(Bytes.getBytes8(_blob, 28)));

    featured = (_toBool(uint8(Bytes.getBytes1(_blob, 36))));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  )
    internal
    pure
    returns (string memory title, string memory description, string memory headerImageUrl, string memory extra)
  {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    title = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    description = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    headerImageUrl = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(3);
    }
    extra = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (CollectionData memory _table) {
    (_table.owner, _table.createdAt, _table.updatedAt, _table.featured) = decodeStatic(_staticData);

    (_table.title, _table.description, _table.headerImageUrl, _table.extra) = decodeDynamic(
      _encodedLengths,
      _dynamicData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 collectionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 collectionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address owner,
    uint64 createdAt,
    uint64 updatedAt,
    bool featured
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(owner, createdAt, updatedAt, featured);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    string memory title,
    string memory description,
    string memory headerImageUrl,
    string memory extra
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(
        bytes(title).length,
        bytes(description).length,
        bytes(headerImageUrl).length,
        bytes(extra).length
      );
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    string memory title,
    string memory description,
    string memory headerImageUrl,
    string memory extra
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((title)), bytes((description)), bytes((headerImageUrl)), bytes((extra)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address owner,
    uint64 createdAt,
    uint64 updatedAt,
    bool featured,
    string memory title,
    string memory description,
    string memory headerImageUrl,
    string memory extra
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(owner, createdAt, updatedAt, featured);

    EncodedLengths _encodedLengths = encodeLengths(title, description, headerImageUrl, extra);
    bytes memory _dynamicData = encodeDynamic(title, description, headerImageUrl, extra);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 collectionId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = collectionId;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
