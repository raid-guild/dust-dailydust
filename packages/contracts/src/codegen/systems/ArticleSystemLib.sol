// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ArticleSystem } from "../../systems/ArticleSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type ArticleSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "thedailydust", name: "ArticleSystem" }))
ArticleSystemType constant articleSystem = ArticleSystemType.wrap(
  0x73797468656461696c7964757374000041727469636c6553797374656d000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title ArticleSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library ArticleSystemLib {
  error ArticleSystemLib_CallingFromRootSystem();

  function createArticle(
    ArticleSystemType self,
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage
  ) internal returns (bytes32 __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0)).createArticle(title, content, categoryName, coverImage);
  }

  function createArticleWithAnchor(
    ArticleSystemType self,
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage,
    bytes32 entityId,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) internal returns (bytes32 __auxRet0) {
    return
      CallWrapper(self.toResourceId(), address(0)).createArticleWithAnchor(
        title,
        content,
        categoryName,
        coverImage,
        entityId,
        coordX,
        coordY,
        coordZ
      );
  }

  function updateArticle(
    ArticleSystemType self,
    bytes32 articleId,
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).updateArticle(articleId, title, content, categoryName, coverImage);
  }

  function deleteArticle(ArticleSystemType self, bytes32 articleId) internal {
    return CallWrapper(self.toResourceId(), address(0)).deleteArticle(articleId);
  }

  function createArticleAnchor(
    ArticleSystemType self,
    bytes32 articleId,
    bytes32 entityId,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).createArticleAnchor(articleId, entityId, coordX, coordY, coordZ);
  }

  function removeArticleAnchor(ArticleSystemType self, bytes32 articleId) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeArticleAnchor(articleId);
  }

  function createArticle(
    CallWrapper memory self,
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage
  ) internal returns (bytes32 __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ArticleSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createArticle_string_string_string_string.createArticle,
      (title, content, categoryName, coverImage)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bytes32));
    }
  }

  function createArticleWithAnchor(
    CallWrapper memory self,
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage,
    bytes32 entityId,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) internal returns (bytes32 __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ArticleSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createArticleWithAnchor_string_string_string_string_bytes32_int32_int32_int32.createArticleWithAnchor,
      (title, content, categoryName, coverImage, entityId, coordX, coordY, coordZ)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bytes32));
    }
  }

  function updateArticle(
    CallWrapper memory self,
    bytes32 articleId,
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ArticleSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _updateArticle_bytes32_string_string_string_string.updateArticle,
      (articleId, title, content, categoryName, coverImage)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function deleteArticle(CallWrapper memory self, bytes32 articleId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ArticleSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_deleteArticle_bytes32.deleteArticle, (articleId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createArticleAnchor(
    CallWrapper memory self,
    bytes32 articleId,
    bytes32 entityId,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ArticleSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createArticleAnchor_bytes32_bytes32_int32_int32_int32.createArticleAnchor,
      (articleId, entityId, coordX, coordY, coordZ)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeArticleAnchor(CallWrapper memory self, bytes32 articleId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ArticleSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_removeArticleAnchor_bytes32.removeArticleAnchor, (articleId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createArticle(
    RootCallWrapper memory self,
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage
  ) internal returns (bytes32 __auxRet0) {
    bytes memory systemCall = abi.encodeCall(
      _createArticle_string_string_string_string.createArticle,
      (title, content, categoryName, coverImage)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bytes32));
    }
  }

  function createArticleWithAnchor(
    RootCallWrapper memory self,
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage,
    bytes32 entityId,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) internal returns (bytes32 __auxRet0) {
    bytes memory systemCall = abi.encodeCall(
      _createArticleWithAnchor_string_string_string_string_bytes32_int32_int32_int32.createArticleWithAnchor,
      (title, content, categoryName, coverImage, entityId, coordX, coordY, coordZ)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bytes32));
    }
  }

  function updateArticle(
    RootCallWrapper memory self,
    bytes32 articleId,
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _updateArticle_bytes32_string_string_string_string.updateArticle,
      (articleId, title, content, categoryName, coverImage)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function deleteArticle(RootCallWrapper memory self, bytes32 articleId) internal {
    bytes memory systemCall = abi.encodeCall(_deleteArticle_bytes32.deleteArticle, (articleId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function createArticleAnchor(
    RootCallWrapper memory self,
    bytes32 articleId,
    bytes32 entityId,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _createArticleAnchor_bytes32_bytes32_int32_int32_int32.createArticleAnchor,
      (articleId, entityId, coordX, coordY, coordZ)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeArticleAnchor(RootCallWrapper memory self, bytes32 articleId) internal {
    bytes memory systemCall = abi.encodeCall(_removeArticleAnchor_bytes32.removeArticleAnchor, (articleId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(ArticleSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(ArticleSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(ArticleSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(ArticleSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(ArticleSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (ArticleSystemType) {
    return ArticleSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(ArticleSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _createArticle_string_string_string_string {
  function createArticle(
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage
  ) external;
}

interface _createArticleWithAnchor_string_string_string_string_bytes32_int32_int32_int32 {
  function createArticleWithAnchor(
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage,
    bytes32 entityId,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) external;
}

interface _updateArticle_bytes32_string_string_string_string {
  function updateArticle(
    bytes32 articleId,
    string memory title,
    string memory content,
    string memory categoryName,
    string memory coverImage
  ) external;
}

interface _deleteArticle_bytes32 {
  function deleteArticle(bytes32 articleId) external;
}

interface _createArticleAnchor_bytes32_bytes32_int32_int32_int32 {
  function createArticleAnchor(bytes32 articleId, bytes32 entityId, int32 coordX, int32 coordY, int32 coordZ) external;
}

interface _removeArticleAnchor_bytes32 {
  function removeArticleAnchor(bytes32 articleId) external;
}

using ArticleSystemLib for ArticleSystemType global;
using ArticleSystemLib for CallWrapper global;
using ArticleSystemLib for RootCallWrapper global;
