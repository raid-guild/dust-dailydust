// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { TipSystem } from "../../systems/TipSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type TipSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "rg_dd_ab564f", name: "TipSystem" }))
TipSystemType constant tipSystem = TipSystemType.wrap(
  0x737972675f64645f616235363466000054697053797374656d00000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title TipSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library TipSystemLib {
  error TipSystemLib_CallingFromRootSystem();

  function tipNote(TipSystemType self, bytes32 noteId) internal {
    return CallWrapper(self.toResourceId(), address(0)).tipNote(noteId);
  }

  function boostNote(TipSystemType self, bytes32 noteId, uint64 duration) internal {
    return CallWrapper(self.toResourceId(), address(0)).boostNote(noteId, duration);
  }

  function getTipJarBalance(TipSystemType self, bytes32 noteId) internal view returns (uint256 balance) {
    return CallWrapper(self.toResourceId(), address(0)).getTipJarBalance(noteId);
  }

  function getNoteBoostStatus(
    TipSystemType self,
    bytes32 noteId
  ) internal view returns (bool isBoosted, uint64 timeRemaining) {
    return CallWrapper(self.toResourceId(), address(0)).getNoteBoostStatus(noteId);
  }

  function withdrawFromTipJar(TipSystemType self, bytes32 noteId) internal {
    return CallWrapper(self.toResourceId(), address(0)).withdrawFromTipJar(noteId);
  }

  function tipNote(CallWrapper memory self, bytes32 noteId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TipSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_tipNote_bytes32.tipNote, (noteId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function boostNote(CallWrapper memory self, bytes32 noteId, uint64 duration) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TipSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_boostNote_bytes32_uint64.boostNote, (noteId, duration));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function getTipJarBalance(CallWrapper memory self, bytes32 noteId) internal view returns (uint256 balance) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TipSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getTipJarBalance_bytes32.getTipJarBalance, (noteId));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function getNoteBoostStatus(
    CallWrapper memory self,
    bytes32 noteId
  ) internal view returns (bool isBoosted, uint64 timeRemaining) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TipSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getNoteBoostStatus_bytes32.getNoteBoostStatus, (noteId));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bool, uint64));
    }
  }

  function withdrawFromTipJar(CallWrapper memory self, bytes32 noteId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TipSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_withdrawFromTipJar_bytes32.withdrawFromTipJar, (noteId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function tipNote(RootCallWrapper memory self, bytes32 noteId) internal {
    bytes memory systemCall = abi.encodeCall(_tipNote_bytes32.tipNote, (noteId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function boostNote(RootCallWrapper memory self, bytes32 noteId, uint64 duration) internal {
    bytes memory systemCall = abi.encodeCall(_boostNote_bytes32_uint64.boostNote, (noteId, duration));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function getTipJarBalance(RootCallWrapper memory self, bytes32 noteId) internal view returns (uint256 balance) {
    bytes memory systemCall = abi.encodeCall(_getTipJarBalance_bytes32.getTipJarBalance, (noteId));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function getNoteBoostStatus(
    RootCallWrapper memory self,
    bytes32 noteId
  ) internal view returns (bool isBoosted, uint64 timeRemaining) {
    bytes memory systemCall = abi.encodeCall(_getNoteBoostStatus_bytes32.getNoteBoostStatus, (noteId));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bool, uint64));
    }
  }

  function withdrawFromTipJar(RootCallWrapper memory self, bytes32 noteId) internal {
    bytes memory systemCall = abi.encodeCall(_withdrawFromTipJar_bytes32.withdrawFromTipJar, (noteId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(TipSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(TipSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(TipSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(TipSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(TipSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (TipSystemType) {
    return TipSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(TipSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _tipNote_bytes32 {
  function tipNote(bytes32 noteId) external;
}

interface _boostNote_bytes32_uint64 {
  function boostNote(bytes32 noteId, uint64 duration) external;
}

interface _getTipJarBalance_bytes32 {
  function getTipJarBalance(bytes32 noteId) external;
}

interface _getNoteBoostStatus_bytes32 {
  function getNoteBoostStatus(bytes32 noteId) external;
}

interface _withdrawFromTipJar_bytes32 {
  function withdrawFromTipJar(bytes32 noteId) external;
}

using TipSystemLib for TipSystemType global;
using TipSystemLib for CallWrapper global;
using TipSystemLib for RootCallWrapper global;
