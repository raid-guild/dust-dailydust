// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { NoteSystem } from "../../systems/NoteSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type NoteSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "rg_dd_0001", name: "NoteSystem" }))
NoteSystemType constant noteSystem = NoteSystemType.wrap(
  0x737972675f64645f30303031000000004e6f746553797374656d000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title NoteSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library NoteSystemLib {
  error NoteSystemLib_CallingFromRootSystem();

  function createNote(NoteSystemType self, bytes32 noteId, string memory title, string memory content) internal {
    return CallWrapper(self.toResourceId(), address(0)).createNote(noteId, title, content);
  }

  function updateNote(NoteSystemType self, bytes32 noteId, string memory title, string memory content) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateNote(noteId, title, content);
  }

  function deleteNote(NoteSystemType self, bytes32 noteId) internal {
    return CallWrapper(self.toResourceId(), address(0)).deleteNote(noteId);
  }

  function createNoteLink(
    NoteSystemType self,
    bytes32 noteId,
    bytes32 entityId,
    uint8 linkType,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).createNoteLink(noteId, entityId, linkType, coordX, coordY, coordZ);
  }

  function removeNoteLink(NoteSystemType self, bytes32 noteId, bytes32 entityId) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeNoteLink(noteId, entityId);
  }

  function createNote(CallWrapper memory self, bytes32 noteId, string memory title, string memory content) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert NoteSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_createNote_bytes32_string_string.createNote, (noteId, title, content));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateNote(CallWrapper memory self, bytes32 noteId, string memory title, string memory content) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert NoteSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_updateNote_bytes32_string_string.updateNote, (noteId, title, content));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function deleteNote(CallWrapper memory self, bytes32 noteId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert NoteSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_deleteNote_bytes32.deleteNote, (noteId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createNoteLink(
    CallWrapper memory self,
    bytes32 noteId,
    bytes32 entityId,
    uint8 linkType,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert NoteSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createNoteLink_bytes32_bytes32_uint8_int32_int32_int32.createNoteLink,
      (noteId, entityId, linkType, coordX, coordY, coordZ)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeNoteLink(CallWrapper memory self, bytes32 noteId, bytes32 entityId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert NoteSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_removeNoteLink_bytes32_bytes32.removeNoteLink, (noteId, entityId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createNote(
    RootCallWrapper memory self,
    bytes32 noteId,
    string memory title,
    string memory content
  ) internal {
    bytes memory systemCall = abi.encodeCall(_createNote_bytes32_string_string.createNote, (noteId, title, content));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateNote(
    RootCallWrapper memory self,
    bytes32 noteId,
    string memory title,
    string memory content
  ) internal {
    bytes memory systemCall = abi.encodeCall(_updateNote_bytes32_string_string.updateNote, (noteId, title, content));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function deleteNote(RootCallWrapper memory self, bytes32 noteId) internal {
    bytes memory systemCall = abi.encodeCall(_deleteNote_bytes32.deleteNote, (noteId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function createNoteLink(
    RootCallWrapper memory self,
    bytes32 noteId,
    bytes32 entityId,
    uint8 linkType,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _createNoteLink_bytes32_bytes32_uint8_int32_int32_int32.createNoteLink,
      (noteId, entityId, linkType, coordX, coordY, coordZ)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeNoteLink(RootCallWrapper memory self, bytes32 noteId, bytes32 entityId) internal {
    bytes memory systemCall = abi.encodeCall(_removeNoteLink_bytes32_bytes32.removeNoteLink, (noteId, entityId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(NoteSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(NoteSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(NoteSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(NoteSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(NoteSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (NoteSystemType) {
    return NoteSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(NoteSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _createNote_bytes32_string_string {
  function createNote(bytes32 noteId, string memory title, string memory content) external;
}

interface _updateNote_bytes32_string_string {
  function updateNote(bytes32 noteId, string memory title, string memory content) external;
}

interface _deleteNote_bytes32 {
  function deleteNote(bytes32 noteId) external;
}

interface _createNoteLink_bytes32_bytes32_uint8_int32_int32_int32 {
  function createNoteLink(
    bytes32 noteId,
    bytes32 entityId,
    uint8 linkType,
    int32 coordX,
    int32 coordY,
    int32 coordZ
  ) external;
}

interface _removeNoteLink_bytes32_bytes32 {
  function removeNoteLink(bytes32 noteId, bytes32 entityId) external;
}

using NoteSystemLib for NoteSystemType global;
using NoteSystemLib for CallWrapper global;
using NoteSystemLib for RootCallWrapper global;
