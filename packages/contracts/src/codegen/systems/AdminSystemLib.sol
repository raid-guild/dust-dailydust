// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { AdminSystem } from "../../systems/AdminSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type AdminSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "thedailydust", name: "AdminSystem" }))
AdminSystemType constant adminSystem = AdminSystemType.wrap(
  0x73797468656461696c7964757374000041646d696e53797374656d0000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title AdminSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library AdminSystemLib {
  error AdminSystemLib_CallingFromRootSystem();

  function addArticleCategory(AdminSystemType self, string memory categoryName) internal returns (bytes32 categoryId) {
    return CallWrapper(self.toResourceId(), address(0)).addArticleCategory(categoryName);
  }

  function removeArticleCategory(AdminSystemType self, bytes32 categoryId) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeArticleCategory(categoryId);
  }

  function addNoteCategory(AdminSystemType self, string memory categoryName) internal returns (bytes32 categoryId) {
    return CallWrapper(self.toResourceId(), address(0)).addNoteCategory(categoryName);
  }

  function removeNoteCategory(AdminSystemType self, bytes32 categoryId) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeNoteCategory(categoryId);
  }

  function addArticleCategory(
    CallWrapper memory self,
    string memory categoryName
  ) internal returns (bytes32 categoryId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_addArticleCategory_string.addArticleCategory, (categoryName));

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bytes32));
    }
  }

  function removeArticleCategory(CallWrapper memory self, bytes32 categoryId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_removeArticleCategory_bytes32.removeArticleCategory, (categoryId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function addNoteCategory(CallWrapper memory self, string memory categoryName) internal returns (bytes32 categoryId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_addNoteCategory_string.addNoteCategory, (categoryName));

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bytes32));
    }
  }

  function removeNoteCategory(CallWrapper memory self, bytes32 categoryId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_removeNoteCategory_bytes32.removeNoteCategory, (categoryId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function addArticleCategory(
    RootCallWrapper memory self,
    string memory categoryName
  ) internal returns (bytes32 categoryId) {
    bytes memory systemCall = abi.encodeCall(_addArticleCategory_string.addArticleCategory, (categoryName));

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bytes32));
    }
  }

  function removeArticleCategory(RootCallWrapper memory self, bytes32 categoryId) internal {
    bytes memory systemCall = abi.encodeCall(_removeArticleCategory_bytes32.removeArticleCategory, (categoryId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function addNoteCategory(
    RootCallWrapper memory self,
    string memory categoryName
  ) internal returns (bytes32 categoryId) {
    bytes memory systemCall = abi.encodeCall(_addNoteCategory_string.addNoteCategory, (categoryName));

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bytes32));
    }
  }

  function removeNoteCategory(RootCallWrapper memory self, bytes32 categoryId) internal {
    bytes memory systemCall = abi.encodeCall(_removeNoteCategory_bytes32.removeNoteCategory, (categoryId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(AdminSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(AdminSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(AdminSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(AdminSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(AdminSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (AdminSystemType) {
    return AdminSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(AdminSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _addArticleCategory_string {
  function addArticleCategory(string memory categoryName) external;
}

interface _removeArticleCategory_bytes32 {
  function removeArticleCategory(bytes32 categoryId) external;
}

interface _addNoteCategory_string {
  function addNoteCategory(string memory categoryName) external;
}

interface _removeNoteCategory_bytes32 {
  function removeNoteCategory(bytes32 categoryId) external;
}

using AdminSystemLib for AdminSystemType global;
using AdminSystemLib for CallWrapper global;
using AdminSystemLib for RootCallWrapper global;
