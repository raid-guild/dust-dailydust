// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { WaypointSystem } from "../../systems/WaypointSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type WaypointSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "rg_dd_ab564f", name: "WaypointSystem" }))
WaypointSystemType constant waypointSystem = WaypointSystemType.wrap(
  0x737972675f64645f6162353634660000576179706f696e7453797374656d0000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title WaypointSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library WaypointSystemLib {
  error WaypointSystemLib_CallingFromRootSystem();

  function createWaypointGroup(
    WaypointSystemType self,
    bytes32 noteId,
    uint16 groupId,
    string memory name,
    uint24 color,
    bool isPublic
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).createWaypointGroup(noteId, groupId, name, color, isPublic);
  }

  function updateWaypointGroup(
    WaypointSystemType self,
    bytes32 noteId,
    uint16 groupId,
    string memory name,
    uint24 color,
    bool isPublic
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateWaypointGroup(noteId, groupId, name, color, isPublic);
  }

  function deleteWaypointGroup(WaypointSystemType self, bytes32 noteId, uint16 groupId) internal {
    return CallWrapper(self.toResourceId(), address(0)).deleteWaypointGroup(noteId, groupId);
  }

  function addWaypointStep(
    WaypointSystemType self,
    bytes32 noteId,
    uint16 groupId,
    uint16 index,
    int32 x,
    int32 y,
    int32 z,
    string memory label
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).addWaypointStep(noteId, groupId, index, x, y, z, label);
  }

  function updateWaypointStep(
    WaypointSystemType self,
    bytes32 noteId,
    uint16 groupId,
    uint16 index,
    int32 x,
    int32 y,
    int32 z,
    string memory label
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateWaypointStep(noteId, groupId, index, x, y, z, label);
  }

  function removeWaypointStep(WaypointSystemType self, bytes32 noteId, uint16 groupId, uint16 index) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeWaypointStep(noteId, groupId, index);
  }

  function createWaypointGroup(
    CallWrapper memory self,
    bytes32 noteId,
    uint16 groupId,
    string memory name,
    uint24 color,
    bool isPublic
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WaypointSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createWaypointGroup_bytes32_uint16_string_uint24_bool.createWaypointGroup,
      (noteId, groupId, name, color, isPublic)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateWaypointGroup(
    CallWrapper memory self,
    bytes32 noteId,
    uint16 groupId,
    string memory name,
    uint24 color,
    bool isPublic
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WaypointSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _updateWaypointGroup_bytes32_uint16_string_uint24_bool.updateWaypointGroup,
      (noteId, groupId, name, color, isPublic)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function deleteWaypointGroup(CallWrapper memory self, bytes32 noteId, uint16 groupId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WaypointSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _deleteWaypointGroup_bytes32_uint16.deleteWaypointGroup,
      (noteId, groupId)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function addWaypointStep(
    CallWrapper memory self,
    bytes32 noteId,
    uint16 groupId,
    uint16 index,
    int32 x,
    int32 y,
    int32 z,
    string memory label
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WaypointSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _addWaypointStep_bytes32_uint16_uint16_int32_int32_int32_string.addWaypointStep,
      (noteId, groupId, index, x, y, z, label)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateWaypointStep(
    CallWrapper memory self,
    bytes32 noteId,
    uint16 groupId,
    uint16 index,
    int32 x,
    int32 y,
    int32 z,
    string memory label
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WaypointSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _updateWaypointStep_bytes32_uint16_uint16_int32_int32_int32_string.updateWaypointStep,
      (noteId, groupId, index, x, y, z, label)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeWaypointStep(CallWrapper memory self, bytes32 noteId, uint16 groupId, uint16 index) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WaypointSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _removeWaypointStep_bytes32_uint16_uint16.removeWaypointStep,
      (noteId, groupId, index)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createWaypointGroup(
    RootCallWrapper memory self,
    bytes32 noteId,
    uint16 groupId,
    string memory name,
    uint24 color,
    bool isPublic
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _createWaypointGroup_bytes32_uint16_string_uint24_bool.createWaypointGroup,
      (noteId, groupId, name, color, isPublic)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateWaypointGroup(
    RootCallWrapper memory self,
    bytes32 noteId,
    uint16 groupId,
    string memory name,
    uint24 color,
    bool isPublic
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _updateWaypointGroup_bytes32_uint16_string_uint24_bool.updateWaypointGroup,
      (noteId, groupId, name, color, isPublic)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function deleteWaypointGroup(RootCallWrapper memory self, bytes32 noteId, uint16 groupId) internal {
    bytes memory systemCall = abi.encodeCall(
      _deleteWaypointGroup_bytes32_uint16.deleteWaypointGroup,
      (noteId, groupId)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function addWaypointStep(
    RootCallWrapper memory self,
    bytes32 noteId,
    uint16 groupId,
    uint16 index,
    int32 x,
    int32 y,
    int32 z,
    string memory label
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _addWaypointStep_bytes32_uint16_uint16_int32_int32_int32_string.addWaypointStep,
      (noteId, groupId, index, x, y, z, label)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateWaypointStep(
    RootCallWrapper memory self,
    bytes32 noteId,
    uint16 groupId,
    uint16 index,
    int32 x,
    int32 y,
    int32 z,
    string memory label
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _updateWaypointStep_bytes32_uint16_uint16_int32_int32_int32_string.updateWaypointStep,
      (noteId, groupId, index, x, y, z, label)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeWaypointStep(RootCallWrapper memory self, bytes32 noteId, uint16 groupId, uint16 index) internal {
    bytes memory systemCall = abi.encodeCall(
      _removeWaypointStep_bytes32_uint16_uint16.removeWaypointStep,
      (noteId, groupId, index)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(WaypointSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(WaypointSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(WaypointSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(WaypointSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(WaypointSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (WaypointSystemType) {
    return WaypointSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(WaypointSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _createWaypointGroup_bytes32_uint16_string_uint24_bool {
  function createWaypointGroup(
    bytes32 noteId,
    uint16 groupId,
    string memory name,
    uint24 color,
    bool isPublic
  ) external;
}

interface _updateWaypointGroup_bytes32_uint16_string_uint24_bool {
  function updateWaypointGroup(
    bytes32 noteId,
    uint16 groupId,
    string memory name,
    uint24 color,
    bool isPublic
  ) external;
}

interface _deleteWaypointGroup_bytes32_uint16 {
  function deleteWaypointGroup(bytes32 noteId, uint16 groupId) external;
}

interface _addWaypointStep_bytes32_uint16_uint16_int32_int32_int32_string {
  function addWaypointStep(
    bytes32 noteId,
    uint16 groupId,
    uint16 index,
    int32 x,
    int32 y,
    int32 z,
    string memory label
  ) external;
}

interface _updateWaypointStep_bytes32_uint16_uint16_int32_int32_int32_string {
  function updateWaypointStep(
    bytes32 noteId,
    uint16 groupId,
    uint16 index,
    int32 x,
    int32 y,
    int32 z,
    string memory label
  ) external;
}

interface _removeWaypointStep_bytes32_uint16_uint16 {
  function removeWaypointStep(bytes32 noteId, uint16 groupId, uint16 index) external;
}

using WaypointSystemLib for WaypointSystemType global;
using WaypointSystemLib for CallWrapper global;
using WaypointSystemLib for RootCallWrapper global;
