// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { CollectionSystem } from "../../systems/CollectionSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type CollectionSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "rg_dd_0002", name: "CollectionSystem" }))
CollectionSystemType constant collectionSystem = CollectionSystemType.wrap(
  0x737972675f64645f3030303200000000436f6c6c656374696f6e53797374656d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title CollectionSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library CollectionSystemLib {
  error CollectionSystemLib_CallingFromRootSystem();

  function createCollection(
    CollectionSystemType self,
    bytes32 collectionId,
    string memory title,
    string memory description
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).createCollection(collectionId, title, description);
  }

  function updateCollection(
    CollectionSystemType self,
    bytes32 collectionId,
    string memory title,
    string memory description
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateCollection(collectionId, title, description);
  }

  function deleteCollection(CollectionSystemType self, bytes32 collectionId) internal {
    return CallWrapper(self.toResourceId(), address(0)).deleteCollection(collectionId);
  }

  function addNoteToCollection(CollectionSystemType self, bytes32 collectionId, bytes32 noteId, uint16 index) internal {
    return CallWrapper(self.toResourceId(), address(0)).addNoteToCollection(collectionId, noteId, index);
  }

  function removeNoteFromCollection(CollectionSystemType self, bytes32 collectionId, bytes32 noteId) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeNoteFromCollection(collectionId, noteId);
  }

  function transferCollectionOwnership(CollectionSystemType self, bytes32 collectionId, address newOwner) internal {
    return CallWrapper(self.toResourceId(), address(0)).transferCollectionOwnership(collectionId, newOwner);
  }

  function createCollection(
    CallWrapper memory self,
    bytes32 collectionId,
    string memory title,
    string memory description
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CollectionSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createCollection_bytes32_string_string.createCollection,
      (collectionId, title, description)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateCollection(
    CallWrapper memory self,
    bytes32 collectionId,
    string memory title,
    string memory description
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CollectionSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _updateCollection_bytes32_string_string.updateCollection,
      (collectionId, title, description)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function deleteCollection(CallWrapper memory self, bytes32 collectionId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CollectionSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_deleteCollection_bytes32.deleteCollection, (collectionId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function addNoteToCollection(CallWrapper memory self, bytes32 collectionId, bytes32 noteId, uint16 index) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CollectionSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _addNoteToCollection_bytes32_bytes32_uint16.addNoteToCollection,
      (collectionId, noteId, index)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeNoteFromCollection(CallWrapper memory self, bytes32 collectionId, bytes32 noteId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CollectionSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _removeNoteFromCollection_bytes32_bytes32.removeNoteFromCollection,
      (collectionId, noteId)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function transferCollectionOwnership(CallWrapper memory self, bytes32 collectionId, address newOwner) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CollectionSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _transferCollectionOwnership_bytes32_address.transferCollectionOwnership,
      (collectionId, newOwner)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createCollection(
    RootCallWrapper memory self,
    bytes32 collectionId,
    string memory title,
    string memory description
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _createCollection_bytes32_string_string.createCollection,
      (collectionId, title, description)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateCollection(
    RootCallWrapper memory self,
    bytes32 collectionId,
    string memory title,
    string memory description
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _updateCollection_bytes32_string_string.updateCollection,
      (collectionId, title, description)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function deleteCollection(RootCallWrapper memory self, bytes32 collectionId) internal {
    bytes memory systemCall = abi.encodeCall(_deleteCollection_bytes32.deleteCollection, (collectionId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function addNoteToCollection(
    RootCallWrapper memory self,
    bytes32 collectionId,
    bytes32 noteId,
    uint16 index
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _addNoteToCollection_bytes32_bytes32_uint16.addNoteToCollection,
      (collectionId, noteId, index)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeNoteFromCollection(RootCallWrapper memory self, bytes32 collectionId, bytes32 noteId) internal {
    bytes memory systemCall = abi.encodeCall(
      _removeNoteFromCollection_bytes32_bytes32.removeNoteFromCollection,
      (collectionId, noteId)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function transferCollectionOwnership(RootCallWrapper memory self, bytes32 collectionId, address newOwner) internal {
    bytes memory systemCall = abi.encodeCall(
      _transferCollectionOwnership_bytes32_address.transferCollectionOwnership,
      (collectionId, newOwner)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(CollectionSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(CollectionSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(CollectionSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(CollectionSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(CollectionSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (CollectionSystemType) {
    return CollectionSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(CollectionSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _createCollection_bytes32_string_string {
  function createCollection(bytes32 collectionId, string memory title, string memory description) external;
}

interface _updateCollection_bytes32_string_string {
  function updateCollection(bytes32 collectionId, string memory title, string memory description) external;
}

interface _deleteCollection_bytes32 {
  function deleteCollection(bytes32 collectionId) external;
}

interface _addNoteToCollection_bytes32_bytes32_uint16 {
  function addNoteToCollection(bytes32 collectionId, bytes32 noteId, uint16 index) external;
}

interface _removeNoteFromCollection_bytes32_bytes32 {
  function removeNoteFromCollection(bytes32 collectionId, bytes32 noteId) external;
}

interface _transferCollectionOwnership_bytes32_address {
  function transferCollectionOwnership(bytes32 collectionId, address newOwner) external;
}

using CollectionSystemLib for CollectionSystemType global;
using CollectionSystemLib for CallWrapper global;
using CollectionSystemLib for RootCallWrapper global;
